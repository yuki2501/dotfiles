[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event= ['BufRead']
hook_post_source = '''
lua << EOF
require'nvim-treesitter.configs'.setup{
  highlight = {
    enable = true,
    disable = {"gitcommit"},
  },
}
EOF
'''


[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
on_event= ['BufRead']
hook_post_source = '''
lua << EOF
require'treesitter-context'.setup{
  enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
  max_lines = 0, -- How many lines the window should span. Values <= 0 mean no limit.
  min_window_height = 0, -- Minimum editor window height to enable context. Values <= 0 mean no limit.
  line_numbers = true,
  multiline_threshold = 20, -- Maximum number of lines to show for a single context
  trim_scope = 'outer', -- Which context lines to discard if `max_lines` is exceeded. Choices: 'inner', 'outer'
  mode = 'cursor',  -- Line used to calculate context. Choices: 'cursor', 'topline'
  -- Separator between context and content. Should be a single character string, like '-'.
  -- When separator is set, the context will only show up when there are at least 2 lines above cursorline.
  separator = nil,
  zindex = 20, -- The Z-index of the context window
  on_attach = nil, -- (fun(buf: integer): boolean) return false to disable attaching
}
EOF
'''

[[plugins]]
repo = 'numToStr/Comment.nvim'
on_event = ['BufRead']
hook_post_source = '''
lua << EOF
require('Comment').setup()
EOF
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_event = ['BufRead']

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = ['InsertEnter']
hook_post_source = '''
set magic
call lexima#add_rule({ 
  \ 'filetype': 'tex', 
  \ 'char': '}', 
  \ 'at': '\\begin{\(\w\+\)\%#}',
  \ 'leave': 1,
  \ 'input_after': '<CR>\\end{\1}',
  \ 'with_submatch': 1})
call lexima#add_rule({
  \ 'char': '$',
  \ 'input_after': '$',
  \ 'filetype': 'tex'
  \ })
'''


[[plugins]]
repo = 'thinca/vim-quickrun'
on_event = ['BufRead']
hook_add = '''
nnoremap <leader>r <cmd>QuickRun<cr>
let g:quickrun_config = {
\  'tex':{
\     'command' : 'latexmk',
\     'outputter' : 'error',
\     'outputter/error/success': 'null',
\     'outputter/error/error': 'quickfix',
\     'srcfile' : '%{expand("%")}',
\     'cmdopt': '-lualatex -pv',
\     'hook/sweep/files':[
\                      '%S:p:r.aux',
\                      '%S:p:r.bbl',
\                      '%S:p:r.blg',
\                      '%S:p:r.dvi',
\                      '%S:p:r.fdb_latexmk',
\                      '%S:p:r.fls',
\                      '%S:p:r.log',
\                      '%S:p:r.out'
\                      ],
\     'exec': [
\             '%c %o %a %s',
\             ],
\   },
\   '_':{},
\  }
let g:quickrun_config.tmptex = {
\
\   'exec': [
\           'cd %{expand("%:p:h")}',
\           'mv %s %a/tmptex.latex',
\           'latexmk -lualatex -pv -output-directory=%a %a/tmptex.latex',
\           ],
\   'args' : expand("%:p:h:gs?\\\\?/?"),
\   'outputter' : 'error',
\   'outputter/error/error' : 'quickfix',
\
\   'hook/eval/enable' : 1,
\   'hook/eval/cd' : "%s:r",
\
\   'hook/eval/template' :'\documentclass{ltjsreport}'
\                         .'\usepackage{luatexja}'
\                         .'\usepackage{amsmath}'
\                         .'\usepackage{amsthm}'
\                         .'\usepackage{mymacro}'
\                         .'\theoremstyle{definition}'
\                         .'\newtheorem{theorem}{定理}'
\                         .'\newtheorem*{theorem*}{定理}'
\                         .'\newtheorem{definition}[theorem]{定義}'
\                         .'\newtheorem*{definition*}{定義}'
\                         .'\numberwithin{theorem}{section}'
\                         .'\begin{document}'
\                          .'%s'
\                         .'\end{document}',
\
\   'hook/sweep/files' : [
\                        '%a/tmptex.latex',
\                        '%a/tmptex.out',
\                        '%a/tmptex.fdb_latexmk',
\                        '%a/tmptex.log',
\                        '%a/tmptex.aux',
\                        '%a/tmptex.dvi'
\                        ],
\}
\
if has('nvim')
  " Use 'neovim_job' in Neovim
  let g:quickrun_config._.runner = 'neovim_job'
elseif exists('*ch_close_in')
  " Use 'job' in Vim which support job feature
  let g:quickrun_config._.runner = 'job'
endif
autocmd FileType tex vnoremap <leader>rr <cmd>QuickRun tmptex<cr> 
autocmd BufWritePost, FileWritePost *.tex QuickRun
'''
[[plugins]]
repo = 'lambdalisue/vim-quickrun-neovim-job'
on_source = 'vim-quickrun'

[[plugins]]
repo = 'thinca/vim-ambicmd'
on_event = ['CmdlineEnter']

[[plugins]]
repo = 'kevinhwang91/nvim-bqf'
on_ft =['qf']

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft=['qf']
hook_add = '''
nnoremap <silent><leader>qr <cmd>Qfreplace<cr>
'''



