[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = ['CursorHold']
hook_post_source = '''
lua << EOF
local lspconfig = require('lspconfig')
local api = vim.api
lspconfig.ocamllsp.setup{}
lspconfig.rnix.setup{}
lspconfig.texlab.setup{}
lspconfig.ts_ls.setup{}

-- Global mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
vim.keymap.set('n', 'ge', vim.diagnostic.open_float)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist)

vim.api.nvim_create_autocmd('LspAttach', {
  group = vim.api.nvim_create_augroup('UserLspConfig', {}),
  callback = function(ev)

    -- Buffer local mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    local opts = { buffer = ev.buf }
    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
    vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
    vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
    vim.keymap.set('n', '<leader>rn', vim.lsp.buf.rename, opts)
    vim.keymap.set({ 'n', 'v' }, '<leader>ca', vim.lsp.buf.code_action, opts)
    vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
    vim.keymap.set('n', '<leader>f', function()
      vim.lsp.buf.format { async = true }
    end, opts)
  end,
})
EOF
'''


[[plugins]]
repo = 'tomtomjhj/coq-lsp.nvim'
on_event = 'CursorHold'
hook_add = '''
let g:loaded_coqtail = 1
let g:coqtail#supported = 0
'''
hook_source = '''
lua << EOF
require'coq-lsp'.setup {
  lsp = {
    on_attach = function(client,bufnr)
    end,

    init_options = {
      show_notices_as_diagnostics = true,
    },
    autostart = true,
  },
}
EOF
'''
