
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_event = ['BufRead']
hook_source = '''
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1] =~ '\s'
endfunction
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
imap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
nm <silent> <C-l> <Plug>(coc-diagnostic-prev)
nm <silent> <C-k> <Plug>(coc-diagnostic-next)
nm <Leader>rn <Plug>(coc-rename)
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> ge <Plug>(coc-list-diagnostics)
aug CocCompleteDone
  au!
  au CompleteDone * if pumvisible() == 0 | pclose | endif
aug END
let g:coc_global_extensions = [
    \ 'coc-actions',
    \ 'coc-git',
    \ 'coc-spell-checker',
    \ 'coc-emoji',
    \ 'coc-markdownlint',
    \ 'coc-json',
    \ 'coc-yaml',
    \ 'coc-diagnostic',
    \ 'coc-sh',
    \ 'coc-vimlsp',
    \ 'coc-rust-analyzer',
    \ 'coc-eslint',
    \ 'coc-tsserver',
    \ 'coc-stylelintplus',
    \ 'coc-vetur',
    \ 'coc-python',
    \ 'coc-css',
    \ 'coc-sql',
    \ 'coc-docker',
    \ 'coc-texlab',
\ ]
'''

[[plugins]]
repo = 'zbirenbaum/copilot.lua'
on_event = 'InsertEnter'
hook_post_source = '''
lua << EOF
require('copilot').setup({})
EOF
'''
[[plugins]]
repo = 'williamboman/mason.nvim'
on_cmd = ['Mason']
on_lua = 'mason'
hook_post_source = '''
lua << EOF
require("mason").setup()
EOF
'''
